# ModemPower Development Rules

## Git Workflow Rules

### Pull Request Process (MANDATORY)
When making any changes to the codebase, follow this exact workflow:

1. **NEVER commit directly to master branch**
2. **Always create a feature branch** for new changes
3. **Create a proper Pull Request** with detailed description
4. **Review and merge** the PR through GitHub

### Step-by-Step Process:

#### 1. Create Feature Branch
```bash
git checkout -b feature/descriptive-branch-name
```

#### 2. Make Changes and Commit
```bash
git add .
git commit -m "feat: descriptive commit message

- Detailed bullet points of changes
- Include benefits and impact
- Reference any issues or requirements"
```

#### 3. Push Feature Branch
```bash
git push origin feature/descriptive-branch-name
```

#### 4. Create Pull Request
Use GitHub CLI to create PR with detailed description:
```bash
gh pr create --title "feat: descriptive title" --body "## Description
Detailed description of changes

## Changes
- ✅ Change 1
- ✅ Change 2
- ✅ Change 3

## Benefits
- Benefit 1
- Benefit 2

## Testing
- [x] Test 1
- [x] Test 2

## Impact
- Risk assessment
- Compatibility notes" --base master
```

#### 5. Merge Pull Request
```bash
gh pr merge [PR_NUMBER] --merge --delete-branch
```

#### 6. Clean Up
```bash
git checkout master
git pull origin master
```

### Commit Message Format
Follow conventional commits format:
- `feat:` for new features
- `fix:` for bug fixes
- `docs:` for documentation changes
- `refactor:` for code refactoring
- `test:` for test additions/changes

### Branch Naming Convention
- `feature/descriptive-name` for new features
- `fix/descriptive-name` for bug fixes
- `hotfix/descriptive-name` for urgent fixes

### Pull Request Requirements
Every PR must include:
- Clear title with conventional commit prefix
- Detailed description with sections:
  - Description
  - Changes (with checkboxes)
  - Benefits
  - Testing checklist
  - Impact assessment
- All tests passing
- Code review approval

### Emergency Hotfix Process
For urgent production fixes:
1. Create `hotfix/descriptive-name` branch from master
2. Make minimal necessary changes
3. Create PR with `hotfix:` prefix
4. Fast-track review and merge
5. Deploy immediately

### Code Quality Rules
- All code must be properly formatted
- Include comprehensive logging
- Add error handling for all external calls
- Write descriptive commit messages
- Update documentation when needed

### API Development Rules
- Use FastAPI best practices
- Include proper response models
- Add comprehensive API documentation
- Include error handling and logging
- Test all endpoints before committing

### ModemPower Specific Rules
- Always include retry logic for external device communication
- Log all modem interactions with timestamps
- Include email notifications for critical failures
- Use environment variables for configuration
- Follow the established scheduler patterns

## Enforcement
- **NO DIRECT COMMITS TO MASTER** - This will be enforced through branch protection rules
- All changes must go through PR process
- Code review required for all PRs
- Automated testing must pass before merge

## Tools Required
- GitHub CLI (`gh`) for PR management
- Git for version control
- Python linting tools
- FastAPI testing framework

---
*This file ensures consistent development practices and maintains code quality across the ModemPower project.*
